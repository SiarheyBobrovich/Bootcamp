/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package by.it_academy.bootcamp.users.controller.api;

import by.it_academy.bootcamp.users.dto.response.ResponsePage;
import by.it_academy.bootcamp.users.dto.response.UserResponseDto;
import by.it_academy.bootcamp.users.dto.response.TMultipleErrorResponse;
import by.it_academy.bootcamp.users.dto.response.TSingleErrorResponse;
import by.it_academy.bootcamp.users.dto.request.UserRequestDto;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Tag(name = "User")
@RequestMapping("/api/v1/user")
public interface UserController {

    @ApiOperation(value = "Get page of users", tags={ "User" })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "The server cannot or will not process the request due to an apparent client error", response = TMultipleErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = TSingleErrorResponse.class) })
    @GetMapping(produces = "application/json")
    ResponseEntity<ResponsePage<UserResponseDto>> apiV1UserGet(
            @Parameter(in = ParameterIn.QUERY, description = "page of user" ,schema=@Schema())
            @RequestParam(value = "page", defaultValue = "0") Integer page,
            @Parameter(in = ParameterIn.QUERY, description = "size of page" ,schema=@Schema())
            @RequestParam(value = "size", defaultValue = "10") Integer size
    );

    @ApiOperation(value = "Add a new user", tags={ "User" }, code = 201)
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "The server cannot or will not process the request due to an apparent client error", response = TMultipleErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = TSingleErrorResponse.class) }
    )
    @PostMapping(
            produces = "application/json",
            consumes = "application/json"
    )
    ResponseEntity<Long> apiV1UserPost(
            @ApiParam(required = true)
            @RequestBody UserRequestDto body
    );
}

